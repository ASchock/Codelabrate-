#pragma checksum "D:\SourceMisc\TeacherStudentEditor\TeacherStudentEditor\Views\EditorSessions\Editor.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5ae9a7acece6e5bea653f1616e6c6bec6ac46af3"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_EditorSessions_Editor), @"mvc.1.0.view", @"/Views/EditorSessions/Editor.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/EditorSessions/Editor.cshtml", typeof(AspNetCore.Views_EditorSessions_Editor))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\SourceMisc\TeacherStudentEditor\TeacherStudentEditor\Views\_ViewImports.cshtml"
using TeacherStudentEditor;

#line default
#line hidden
#line 2 "D:\SourceMisc\TeacherStudentEditor\TeacherStudentEditor\Views\_ViewImports.cshtml"
using TeacherStudentEditor.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5ae9a7acece6e5bea653f1616e6c6bec6ac46af3", @"/Views/EditorSessions/Editor.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"81ac8d32c1ab8eb5a3771e0a528ee533d14a7ffb", @"/Views/_ViewImports.cshtml")]
    public class Views_EditorSessions_Editor : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<EditorSession>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/signalr/dist/browser/signalr.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 2 "D:\SourceMisc\TeacherStudentEditor\TeacherStudentEditor\Views\EditorSessions\Editor.cshtml"
  
    ViewData["Title"] = $"Session - {Model.Title}";
    bool teacherMode = Model.Teacher.UserName == Context.User.Identity.Name;

#line default
#line hidden
            BeginContext(160, 1771, true);
            WriteLiteral(@"<section class="" section_padding_50"">
    <div class=""container"">
        <div class=""row"">
            <div class=""col-md-9"">
                <div id=""editor"" style=""width:auto;height:500px;border:1px solid grey""></div>
            </div>
            <div class=""col-md-3"">
                <h5>Questions & Comments</h5>
                <div id=""questions"" style=""width: auto;"">
                    <ul class=""list-group"" id=""commentsPanel""></ul>
                    <div id=""postComment"" style=""display: none"">
                        <div class=""input-group"">
                            <input type=""text"" class=""form-control"" id=""commentText"" placeholder=""Comment..."">
                            <span class=""input-group-append"">
                                <button class=""btn btn-outline-secondary"" type=""button"" id=""postCommentButton"" onclick=""postComment()"">
                                    <i class=""fa fa-comment"" aria-hidden=""true""></i>
                                </button>
         ");
            WriteLiteral(@"                   </span>
                        </div><!-- /input-group -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<style>
    .editor-question {
        background-color: goldenrod
    }
</style>

<script type=""template/html"" id=""leftCommentTemplate"">
    <li class=""list-group-item"">
        <i class=""fa fa-comment"" aria-hidden=""true"" style=""transform: scaleX(-1)""></i>
        <span>[COMMENT]</span>
    </li>
</script>
<script type=""template/html"" id=""rightCommentTemplate"">
    <li class=""list-group-item"" style=""text-align: right"">
        <span>[COMMENT]</span>
        <i class=""fa fa-comment"" aria-hidden=""true""></i>
    </li>
</script>

");
            EndContext();
            DefineSection("scripts", async() => {
                BeginContext(1948, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(1954, 61, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6de309a92ff94be49f3c0ed72bec285f", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(2015, 186, true);
                WriteLiteral("\r\n    <script src=\"/lib/monaco-editor/dev/vs/loader.js\"></script>\r\n\r\n    <script>\r\n        var connection = new signalR.HubConnectionBuilder()\r\n            .withUrl(\'/sessions?sessionid=");
                EndContext();
                BeginContext(2202, 8, false);
#line 57 "D:\SourceMisc\TeacherStudentEditor\TeacherStudentEditor\Views\EditorSessions\Editor.cshtml"
                                     Write(Model.Id);

#line default
#line hidden
                EndContext();
                BeginContext(2210, 180, true);
                WriteLiteral("\')\r\n            .configureLogging(signalR.LogLevel.Trace)\r\n            .build();\r\n\r\n        var editor;\r\n        var selectedQuestion;\r\n        var dirty;\r\n        var questions = ");
                EndContext();
                BeginContext(2391, 31, false);
#line 64 "D:\SourceMisc\TeacherStudentEditor\TeacherStudentEditor\Views\EditorSessions\Editor.cshtml"
                   Write(Json.Serialize(Model.Questions));

#line default
#line hidden
                EndContext();
                BeginContext(2422, 259, true);
                WriteLiteral(@";
        var oldDeltaDecorations = [];
        var leftCommentTemplate = $('#leftCommentTemplate').html();
        var rightCommentTemplate = $('#rightCommentTemplate').html();
        var commentsPanel = $('#commentsPanel');
        var currentUser = '");
                EndContext();
                BeginContext(2682, 26, false);
#line 69 "D:\SourceMisc\TeacherStudentEditor\TeacherStudentEditor\Views\EditorSessions\Editor.cshtml"
                      Write(Context.User.Identity.Name);

#line default
#line hidden
                EndContext();
                BeginContext(2708, 3934, true);
                WriteLiteral(@"';

        connection.start().catch(function(err) {
            return console.error(err.toString());
        });

        connection.on(""ReceiveChanges"",
            (changes) => {
                switch (changes.type) {
                case ""edit"":
                    editor.getModel().applyEdits(changes.payload.delta.slice());
                    break;
                case ""selectionChange"":
                    //a = b.state.editor.deltaDecorations(b.oldDeltaDecorations, [{
                    //        range: a.payload.delta,
                    //        options: {
                    //            isWholeLine: !1,
                    //            className: ""editor-selection""
                    //        }
                    //    }]),
                    //    b.oldDeltaDecorations = a
                }
            });

        connection.on(""QuestionPosted"",
            (question) => {
                questions.push(question);
                updateQuestionDecorations()");
                WriteLiteral(@";
            });
        connection.on(""CommentPosted"",
            (questionId, comment) => {
                let question = questions.find(x => x.id == questionId);
                question.comments.push(comment);
                if (selectedQuestion.id == questionId)
                    showQuestion();
            });

        function mapChangeEvent(changeEvent) {
            return {
                type: 'edit',
                payload: {
                    at: (new Date).getTime(),
                    delta: convertToEditOperations(changeEvent)
                }
            }
        }

        function convertToEditOperations(changeEvent) {
            return changeEvent.changes.map(x => {
                return {
                    text: x.text,
                    range: new monaco.Range(x.range.startLineNumber,
                        x.range.startColumn,
                        x.range.endLineNumber,
                        x.range.endColumn),
                    for");
                WriteLiteral(@"ceMoveMarkers: x.forceMoveMarkers
                }
            });
        }

        function postComment() {
            var questionId = selectedQuestion ? selectedQuestion.id : '';
            connection.invoke(""PostComment"", questionId, editor.getSelection(), $('#commentText').val());
        }

        function saveCode() {
            if (!dirty)
                return;
            connection.invoke(""SaveCode"", editor.getValue());
            dirty = false;
        }

        function showQuestion() {
            var html = '';
            if (!selectedQuestion) {
                commentsPanel.html('');
                $('#postComment').hide();
                return;
            }
            selectedQuestion.comments.forEach(x => {
                if (x.user.userName == currentUser) {
                    html += leftCommentTemplate.replace('[COMMENT]', x.text);
                } else {
                    html += rightCommentTemplate.replace('[COMMENT]', x.text);
       ");
                WriteLiteral(@"         }
            });
            commentsPanel.html(html);
            $('#postComment').show();
        };

        function updateQuestionDecorations() {
            oldDeltaDecorations = editor.deltaDecorations(oldDeltaDecorations,
                questions.map(x => {
                    return {
                        range: x,
                        options: {
                            isWholeLine: false,
                            className: 'editor-question'
                        }
                    }
                }));
        }

        require.config({ paths: { 'vs': '/lib/monaco-editor/dev/vs' } });
        require(['vs/editor/editor.main'],
            function() {
                editor = monaco.editor.create(document.getElementById('editor'),
                    {
                        value: '");
                EndContext();
                BeginContext(6643, 65, false);
#line 177 "D:\SourceMisc\TeacherStudentEditor\TeacherStudentEditor\Views\EditorSessions\Editor.cshtml"
                           Write(Html.Raw(Json.Serialize(Model.Code).ToString().Replace("\"", "")));

#line default
#line hidden
                EndContext();
                BeginContext(6708, 39, true);
                WriteLiteral("\',\r\n                        language: \'");
                EndContext();
                BeginContext(6748, 14, false);
#line 178 "D:\SourceMisc\TeacherStudentEditor\TeacherStudentEditor\Views\EditorSessions\Editor.cshtml"
                              Write(Model.Language);

#line default
#line hidden
                EndContext();
                BeginContext(6762, 38, true);
                WriteLiteral("\',\r\n                        readOnly: ");
                EndContext();
                BeginContext(6802, 44, false);
#line 179 "D:\SourceMisc\TeacherStudentEditor\TeacherStudentEditor\Views\EditorSessions\Editor.cshtml"
                              Write((!teacherMode).ToString().ToLowerInvariant());

#line default
#line hidden
                EndContext();
                BeginContext(6847, 29, true);
                WriteLiteral("\r\n                    });\r\n\r\n");
                EndContext();
#line 182 "D:\SourceMisc\TeacherStudentEditor\TeacherStudentEditor\Views\EditorSessions\Editor.cshtml"
                 if (teacherMode)
                {
                    

#line default
#line hidden
                BeginContext(6956, 311, true);
                WriteLiteral(@"
                        editor.getModel().onDidChangeContent(changes => {
                            dirty = true;
                            connection.invoke(""PostChanges"", mapChangeEvent(changes));
                        });
                        setInterval(saveCode, 5000);
                    ");
                EndContext();
#line 190 "D:\SourceMisc\TeacherStudentEditor\TeacherStudentEditor\Views\EditorSessions\Editor.cshtml"
                           

                }

#line default
#line hidden
                BeginContext(7297, 2, true);
                WriteLiteral("\r\n");
                EndContext();
#line 194 "D:\SourceMisc\TeacherStudentEditor\TeacherStudentEditor\Views\EditorSessions\Editor.cshtml"
                 if (!teacherMode)
                {
                    

#line default
#line hidden
                BeginContext(7380, 560, true);
                WriteLiteral(@"
                        editor.onDidChangeCursorSelection(selectionChangeEvent => {
                            if (selectionChangeEvent.reason == monaco.editor.CursorChangeReason.Explicit) {
                                if (selectionChangeEvent.selection.isEmpty()) {
                                    $('#postComment').hide();
                                } else {
                                    $('#postComment').show();
                                }
                            }
                        });
                    ");
                EndContext();
#line 206 "D:\SourceMisc\TeacherStudentEditor\TeacherStudentEditor\Views\EditorSessions\Editor.cshtml"
                           
                }

#line default
#line hidden
                BeginContext(7968, 401, true);
                WriteLiteral(@"
                updateQuestionDecorations();

                editor.onMouseDown(x => {
                    let question = questions.find(y => {
                        return monaco.Range.containsPosition(y, x.target.position);
                    });
                    selectedQuestion = question;
                    showQuestion();
                });
            });
    </script>
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<EditorSession> Html { get; private set; }
    }
}
#pragma warning restore 1591
